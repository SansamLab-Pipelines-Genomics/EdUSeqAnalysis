configfile: "config/config.yml"

##################################################################
##                    Define input functions                    ##
##################################################################

# this was created after reading 
#  https://eriqande.github.io/eca-bioinf-handbook/managing-workflows-with-snakemake.html
#  https://www.biostars.org/p/335903/

# this imports the pandas package functionality in an object named pd
import pandas as pd

# this reads the CSV file and sets an index using the values in the "sample" column.
samples_table = pd.read_csv("config/samples.csv").set_index("sample", drop=False)

# fastq filename input function definition set to Python dictionary
def fq_dict_from_sample(wildcards):
  return {
    "fq1": samples_table.loc[wildcards.sample, "fastq1"],
    "fq2": samples_table.loc[wildcards.sample, "fastq2"]
  }

# this makes a new sample table with only the 'treatment' sample rows
samples_table2 = samples_table.loc[samples_table['sampleType'] == 'treatment']

# sample_type input function definition set to Python dictionary
def sample_type_dict_from_sample(wildcards):
  return {
    "treatment": samples_table2.loc[wildcards.sample, "sample"] + '.bam',
    "control": samples_table2.loc[wildcards.sample, "sampleType"] + '.bam'
  }

##################################################################
##                           rules                              ##
##################################################################

# to run snakemake without explicitly requesting any output files on the command line, we must request output files in the first rule. Therefore we include this otherwise useless rule here  
rule all:
    input:
        expand("results/trimmed/{sample}_trimmed_R1.fastq.gz", sample = samples_table.index),
        expand("results/qc/fastqc/{sample}_R1_fastqc.html", sample = samples_table.index),
        expand("results/aligned/{sample}.bam", sample = samples_table.index),
        expand("{sample}-W200-G600-FDR0.01-island.bed", sample = samples_table2.index)


# run fastqc on fastq.gz files before trimming
rule fastqc_reads:
    input:
        unpack(fq_dict_from_sample)   # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        html1="results/qc/fastqc/{sample}_R1_fastqc.html",
        zip1="results/qc/fastqc/{sample}_R1_fastqc.zip",
        html2="results/qc/fastqc/{sample}_R2_fastqc.html",
        zip2="results/qc/fastqc/{sample}_R2_fastqc.zip"
    conda:
        "envs/qc_trim_align.yml"
    log: "results/logs/snakelogs/fastqc_reads.{sample}.log"
    shell:
        """
        fastqc {input.fq1}
        fastqc {input.fq2}
        dir=$(dirname {input.fq1})
        bsename=$(basename {input.fq1} .fastq.gz)
        mv ${{dir}}/${{bsename}}_fastqc.html {output.html1}
        mv ${{dir}}/${{bsename}}_fastqc.zip {output.zip1}
        bsename=$(basename {input.fq2} .fastq.gz)
        mv ${{dir}}/${{bsename}}_fastqc.html {output.html2}
        mv ${{dir}}/${{bsename}}_fastqc.zip {output.zip2}
        """

# trim reads
rule trim_reads_with_fastp:
    input:
        unpack(fq_dict_from_sample)   # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        trimmed1="results/trimmed/{sample}_trimmed_R1.fastq.gz",
        trimmed2="results/trimmed/{sample}_trimmed_R2.fastq.gz",
        fastp_report="results/qc/fastp_reports/{sample}.html",
        fastp_json="results/qc/fastp_reports/{sample}.json"
    conda:
        "envs/qc_trim_align.yml"
    log: "results/logs/snakelogs/trim_reads_with_fastp.{sample}.log"
    shell:
        """
        fastp -i {input.fq1} -I {input.fq2} -o {output.trimmed1} -O {output.trimmed2} -h {output.fastp_report} --json {output.fastp_json} -R "{wildcards.sample}" -w 8
        """

# align reads to genome
rule align_reads_with_bwamem:
    input:
        R1="results/trimmed/{sample}_trimmed_R1.fastq.gz",
        R2="results/trimmed/{sample}_trimmed_R2.fastq.gz"
        #R1=expand("results/trimmed/{sample}_trimmed_R1.fastq.gz", sample = samples_table.index),  # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
        #R2=expand("results/trimmed/{sample}_trimmed_R2.fastq.gz", sample = samples_table.index)  # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    params:
        genome=config["genome"]
    output:
        bam="results/aligned/{sample}.bam",
        bai="results/aligned/{sample}.bam.bai"
    conda:
        "envs/qc_trim_align.yml"
    log: "results/logs/snakelogs/align_reads_with_bwamem.{sample}.log"
    shell:
        """
        bwa mem -M -t 12 {params.genome} {input.R1} {input.R2} | samtools sort -@ 12 > {output.bam}
        samtools index -@ 12 {output.bam} > {output.bai}
        """

# call peaks with sicer

rule call_peaks_with_sicer:
    input:
        unpack(sample_type_dict_from_sample)   # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        "{sample}-W200-G600-FDR0.01-island.bed"
    conda:
        "envs/qc_trim_align.yml"
    log: "results/logs/snakelogs/align_reads_with_bwamem.{sample}.log"
    shell:
        """
        ml sicer2
        sicer -t {input.treatment}.bam -c {input.control}.bam -s hg19 -w 200 -f 150 -fdr 0.01 -o results/sicer/ -g 600 -cpu 12
        """